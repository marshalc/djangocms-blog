"""
Django settings for test_djangocms_blog project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from tempfile import mkdtemp


# From blog tests, but why?
def gettext(s):
    return s


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-5008&%*+ja#76b5a-5hty69#c8^igep)3$ip%^qq@1qcajd8v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

PRE_DJANGO_APPS = [
    'test_djangocms_blog',
    'djangocms_admin_style',
]
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
DJANGOCMS_APPS = [
    'django.contrib.sites',
    'cms',
    'menus',
    'treebeard',
]
DJANGOCMS_BLOG_APPS = [
    'djangocms_blog',  # Local repo version, not a pip install!
    'filer',
    'parler',
    'meta',
    'easy_thumbnails',
    'django.contrib.sitemaps',
    'djangocms_text_ckeditor',
    'taggit',
    'taggit_autosuggest',
    # 'aldryn_apphooks_config',
    # 'aldryn_search',
    'djangocms_video',
    'sortedm2m',
]
INTERNAL_TEST_APPS = [
    'test_djangocms_blog.media_app',
]
INSTALLED_APPS = PRE_DJANGO_APPS + DJANGO_APPS + DJANGOCMS_APPS + DJANGOCMS_BLOG_APPS + INTERNAL_TEST_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'test_utils.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
MIGRATION_MODULES = {}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
AUTH_USER_MODEL = 'test_djangocms_blog.CustomUser'

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'en'
LANGUAGES = (
    ('en', gettext('English')),
    ('fr', gettext('French')),
    ('it', gettext('Italiano')),
)

TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

CMS_LANGUAGES = {
    1: [
        {
            'code': 'en',
            'name': gettext('English'),
            'public': True,
        },
        {
            'code': 'it',
            'name': gettext('Italiano'),
            'public': True,
        },
        {
            'code': 'fr',
            'name': gettext('French'),
            'public': True,
        },
    ],
    2: [
        {
            'code': 'en',
            'name': gettext('English'),
            'public': True,
        },
    ],
    'default': {
        'hide_untranslated': False,
    },
}
PARLER_LANGUAGES = {
    1: (
        {'code': 'en'},
        {'code': 'it'},
        {'code': 'fr'},
    ),
    2: (
        {'code': 'en'},
    ),
    'default': {
        'fallbacks': ['en'],
        'hide_untranslated': False,
    }
}
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# App specific config
CMS_TEMPLATES = (
    ('blog.html', 'Blog template'),
)
META_SITE_PROTOCOL = 'http'
META_USE_SITES = True
META_SITE_DOMAIN = 'example.com'
META_USE_OG_PROPERTIES = True
META_USE_TWITTER_PROPERTIES = True
META_USE_GOOGLEPLUS_PROPERTIES = True
THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters',
)
FILE_UPLOAD_TEMP_DIR = mkdtemp()
SITE_ID = 1
HAYSTACK_CONNECTIONS = {
    'default': {}
}
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}
BLOG_AUTO_SETUP = False

try:
    import cmsplugin_filer_image.migrations_django  # pragma: no cover # NOQA

    MIGRATION_MODULES['cmsplugin_filer_image'] = 'cmsplugin_filer_image.migrations_django'

except ImportError:
    pass

try:
    import knocker  # pragma: no cover # NOQA

    INSTALLED_APPS.append('knocker')
    INSTALLED_APPS.append('channels')
    INSTALLED_APPS.append('djangocms_blog.liveblog', )
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'asgiref.inmemory.ChannelLayer',
            'ROUTING': 'test_djangocms_blog.routing.channel_routing',
        },
    }
except ImportError:
    pass
